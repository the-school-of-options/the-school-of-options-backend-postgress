import { MigrationInterface, QueryRunner } from "typeorm";

export class AutoGenerated1759553636521 implements MigrationInterface {
    name = 'AutoGenerated1759553636521'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE "webinars" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "email" character varying(320) NOT NULL, "fullName" character varying(160), "webinarName" character varying(360), "phoneNumber" character varying(15), "source" character varying(100), "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_cadbb48a8b68ff75901903d7eea" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "IDX_bba2151f209ffa1b69ec5c01b6" ON "webinars" ("email") `);
        await queryRunner.query(`CREATE TYPE "public"."otp_type_enum" AS ENUM('email_verification', 'password_reset', 'login')`);
        await queryRunner.query(`CREATE TABLE "users" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "cognitoId" character varying(64), "email" character varying(320) NOT NULL, "fullName" character varying(100) NOT NULL, "mobileNumber" character varying(20), "googleId" character varying(128), "isGoogleAcc" boolean NOT NULL DEFAULT false, "role" "public"."user_role_enum" NOT NULL DEFAULT 'User', "isVerified" boolean NOT NULL DEFAULT false, "isActive" boolean NOT NULL DEFAULT true, "lastLogin" TIMESTAMP WITH TIME ZONE, "loginCount" integer NOT NULL DEFAULT '0', "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "otpCode" character varying(64), "otpExpiresat" TIMESTAMP WITH TIME ZONE, "otpAttempts" smallint DEFAULT '0', "otpLastsentat" TIMESTAMP WITH TIME ZONE, "otpVerified" boolean DEFAULT false, "otpType" "public"."otp_type_enum", CONSTRAINT "UQ_b1679ad39627f7359fbb8405c66" UNIQUE ("cognitoId"), CONSTRAINT "UQ_97672ac88f789774dd47f7c8be3" UNIQUE ("email"), CONSTRAINT "CHK_user_otp_attempts" CHECK ("otpAttempts" <= 5 OR "otpAttempts" IS NULL), CONSTRAINT "CHK_user_fullname_len" CHECK (char_length("fullName") <= 100), CONSTRAINT "PK_a3ffb1c0c8416b9fc6f907b7433" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_b1679ad39627f7359fbb8405c6" ON "users" ("cognitoId") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_97672ac88f789774dd47f7c8be" ON "users" ("email") `);
        await queryRunner.query(`CREATE INDEX "IDX_61dc14c8c49c187f5d08047c98" ON "users" ("mobileNumber") `);
        await queryRunner.query(`CREATE INDEX "IDX_f382af58ab36057334fb262efd" ON "users" ("googleId") `);
        await queryRunner.query(`CREATE TABLE "subscribers" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "email" character varying(320) NOT NULL, "name" character varying(160), "subscribed" boolean NOT NULL DEFAULT true, "subscribedLists" text NOT NULL DEFAULT '', "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_cbe0a7a9256c826f403c0236b67" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_1a7163c08f0e57bd1c9821508b" ON "subscribers" ("email") `);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`DROP INDEX "public"."IDX_1a7163c08f0e57bd1c9821508b"`);
        await queryRunner.query(`DROP TABLE "subscribers"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_f382af58ab36057334fb262efd"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_61dc14c8c49c187f5d08047c98"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_97672ac88f789774dd47f7c8be"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_b1679ad39627f7359fbb8405c6"`);
        await queryRunner.query(`DROP TABLE "users"`);
        await queryRunner.query(`DROP TYPE "public"."otp_type_enum"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_bba2151f209ffa1b69ec5c01b6"`);
        await queryRunner.query(`DROP TABLE "webinars"`);
    }

}
